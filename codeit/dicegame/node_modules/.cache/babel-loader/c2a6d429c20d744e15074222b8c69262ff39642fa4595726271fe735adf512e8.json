{"ast":null,"code":"var _jsxFileName = \"/Users/gimgyuyeon/Desktop/ssafy_java/codeit/dicegame/src/Board.js\",\n  _s = $RefreshSig$();\nimport Dice from \"./Dice\";\nimport Button from \"./Button\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction random(n) {\n  return Math.ceil(Math.random() * n);\n}\nfunction Board(_ref) {\n  _s();\n  let {\n    name,\n    color\n  } = _ref;\n  const [num, setNum] = useState(1);\n  const [sum, setSum] = useState(0);\n  const [gameHistory, setGameHistory] = useState([]);\n\n  // 버튼을 클릭할 때마다 발생하는 이벤트\n  const handleRollClick = () => {\n    const nextNum = random(6);\n    setNum(nextNum);\n    setSum(sum + nextNum);\n\n    /* \n    배열이나 객체같은 참조형 state를 사용할 때에는 \n    메소드나 할당 연산자로 값을 바꾸는 것이 아니라\n    반드시 새로운 값을 만들어서 변경을 해야 한다.\n    왜냐하면 주소값을 변하지 않은 채로 계속 참조만 하기 때문에\n    */\n    setGameHistory([...gameHistory, nextNum]);\n  };\n\n  // 초기화\n  const handleClearClick = () => {\n    setNum(1);\n    setSum(0);\n    setGameHistory([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dice, {\n      color: color,\n      num: num\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uCD1D\\uC810\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: sum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uAE30\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: gameHistory.join(\", \")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"dQW6xqFqWpvny+FSd4tjKYYKZj0=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Dice","Button","useState","random","n","Math","ceil","Board","name","color","num","setNum","sum","setSum","gameHistory","setGameHistory","handleRollClick","nextNum","handleClearClick","join"],"sources":["/Users/gimgyuyeon/Desktop/ssafy_java/codeit/dicegame/src/Board.js"],"sourcesContent":["import Dice from \"./Dice\";\nimport Button from \"./Button\";\nimport { useState } from \"react\";\n\nfunction random(n) {\n  return Math.ceil(Math.random() * n);\n}\n\nfunction Board({ name, color }) {\n  const [num, setNum] = useState(1);\n  const [sum, setSum] = useState(0);\n  const [gameHistory, setGameHistory] = useState([]);\n\n  // 버튼을 클릭할 때마다 발생하는 이벤트\n  const handleRollClick = () => {\n    const nextNum = random(6);\n    setNum(nextNum);\n    setSum(sum + nextNum);\n\n    /* \n  배열이나 객체같은 참조형 state를 사용할 때에는 \n  메소드나 할당 연산자로 값을 바꾸는 것이 아니라\n  반드시 새로운 값을 만들어서 변경을 해야 한다.\n  왜냐하면 주소값을 변하지 않은 채로 계속 참조만 하기 때문에\n  */\n    setGameHistory([...gameHistory, nextNum]);\n  };\n\n  // 초기화\n  const handleClearClick = () => {\n    setNum(1);\n    setSum(0);\n    setGameHistory([]);\n  };\n\n  return (\n    <div>\n      <h2>{name}</h2>\n      <Dice color={color} num={num} />\n      <h2>총점</h2>\n      <p>{sum}</p>\n      <h2>기록</h2>\n      <p>{gameHistory.join(\", \")}</p>\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,QAAQ,QAAQ,OAAO;AAAC;AAEjC,SAASC,MAAM,CAACC,CAAC,EAAE;EACjB,OAAOC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACF,MAAM,EAAE,GAAGC,CAAC,CAAC;AACrC;AAEA,SAASG,KAAK,OAAkB;EAAA;EAAA,IAAjB;IAAEC,IAAI;IAAEC;EAAM,CAAC;EAC5B,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACU,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMc,eAAe,GAAG,MAAM;IAC5B,MAAMC,OAAO,GAAGd,MAAM,CAAC,CAAC,CAAC;IACzBQ,MAAM,CAACM,OAAO,CAAC;IACfJ,MAAM,CAACD,GAAG,GAAGK,OAAO,CAAC;;IAErB;AACJ;AACA;AACA;AACA;AACA;IACIF,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEG,OAAO,CAAC,CAAC;EAC3C,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAG,MAAM;IAC7BP,MAAM,CAAC,CAAC,CAAC;IACTE,MAAM,CAAC,CAAC,CAAC;IACTE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,UAAKP;IAAI;MAAA;MAAA;MAAA;IAAA,QAAM,eACf,QAAC,IAAI;MAAC,KAAK,EAAEC,KAAM;MAAC,GAAG,EAAEC;IAAI;MAAA;MAAA;MAAA;IAAA,QAAG,eAChC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAW,eACX;MAAA,UAAIE;IAAG;MAAA;MAAA;MAAA;IAAA,QAAK,eACZ;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAW,eACX;MAAA,UAAIE,WAAW,CAACK,IAAI,CAAC,IAAI;IAAC;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QAC3B;AAEV;AAAC,GArCQZ,KAAK;AAAA,KAALA,KAAK;AAuCd,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}