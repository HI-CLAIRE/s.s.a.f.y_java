{"ast":null,"code":"var _jsxFileName = \"/Users/gimgyuyeon/Desktop/ssafy_java/codeit/dicegame/src/App.js\",\n  _s = $RefreshSig$();\nimport Board from \"./Board\";\nimport Button from \"./Button\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction random(n) {\n  return Math.ceil(Math.random() * n);\n}\nfunction App() {\n  _s();\n  const [num, setNum] = useState(1);\n  const [sum, setSum] = useState(0);\n  const [gameHistory, setGameHistory] = useState([]);\n\n  // 버튼을 클릭할 때마다 발생하는 이벤트\n  const handleRollClick = () => {\n    const nextNum = random(6);\n    setNum(nextNum);\n    setSum(sum + nextNum);\n\n    /* \n    배열이나 객체같은 참조형 state를 사용할 때에는 \n    메소드나 할당 연산자로 값을 바꾸는 것이 아니라\n    반드시 새로운 값을 만들어서 변경을 해야 한다.\n    왜냐하면 주소값을 변하지 않은 채로 계속 참조만 하기 때문에\n    */\n    setGameHistory([...gameHistory, nextNum]);\n  };\n\n  // 초기화\n  const handleClearClick = () => {\n    setNum(1);\n    setSum(0);\n    setGameHistory([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleRollClick,\n        children: \"\\uB358\\uC9C0\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClearClick,\n        children: \"\\uCC98\\uC74C\\uBD80\\uD130\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      name: \"\\uB098\",\n      color: \"blue\",\n      num: num,\n      sum: sum,\n      gameHistor: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      name: \"\\uC0C1\\uB300\",\n      color: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dQW6xqFqWpvny+FSd4tjKYYKZj0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Board","Button","useState","random","n","Math","ceil","App","num","setNum","sum","setSum","gameHistory","setGameHistory","handleRollClick","nextNum","handleClearClick"],"sources":["/Users/gimgyuyeon/Desktop/ssafy_java/codeit/dicegame/src/App.js"],"sourcesContent":["import Board from \"./Board\";\nimport Button from \"./Button\";\nimport { useState } from \"react\";\n\nfunction random(n) {\n  return Math.ceil(Math.random() * n);\n}\n\nfunction App() {\n  const [num, setNum] = useState(1);\n  const [sum, setSum] = useState(0);\n  const [gameHistory, setGameHistory] = useState([]);\n\n  // 버튼을 클릭할 때마다 발생하는 이벤트\n  const handleRollClick = () => {\n    const nextNum = random(6);\n    setNum(nextNum);\n    setSum(sum + nextNum);\n\n    /* \n  배열이나 객체같은 참조형 state를 사용할 때에는 \n  메소드나 할당 연산자로 값을 바꾸는 것이 아니라\n  반드시 새로운 값을 만들어서 변경을 해야 한다.\n  왜냐하면 주소값을 변하지 않은 채로 계속 참조만 하기 때문에\n  */\n    setGameHistory([...gameHistory, nextNum]);\n  };\n\n  // 초기화\n  const handleClearClick = () => {\n    setNum(1);\n    setSum(0);\n    setGameHistory([]);\n  };\n\n  return (\n    <div>\n      <div>\n        <Button onClick={handleRollClick}>던지기</Button>\n        <Button onClick={handleClearClick}>처음부터</Button>\n      </div>\n      <Board name=\"나\" color=\"blue\" num={num} sum={sum} gameHistor/>\n      <Board name=\"상대\" color=\"red\" />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,QAAQ,QAAQ,OAAO;AAAC;AAEjC,SAASC,MAAM,CAACC,CAAC,EAAE;EACjB,OAAOC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACF,MAAM,EAAE,GAAGC,CAAC,CAAC;AACrC;AAEA,SAASG,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACQ,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACjC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMY,eAAe,GAAG,MAAM;IAC5B,MAAMC,OAAO,GAAGZ,MAAM,CAAC,CAAC,CAAC;IACzBM,MAAM,CAACM,OAAO,CAAC;IACfJ,MAAM,CAACD,GAAG,GAAGK,OAAO,CAAC;;IAErB;AACJ;AACA;AACA;AACA;AACA;IACIF,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEG,OAAO,CAAC,CAAC;EAC3C,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAG,MAAM;IAC7BP,MAAM,CAAC,CAAC,CAAC;IACTE,MAAM,CAAC,CAAC,CAAC;IACTE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,wBACE,QAAC,MAAM;QAAC,OAAO,EAAEC,eAAgB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAa,eAC9C,QAAC,MAAM;QAAC,OAAO,EAAEE,gBAAiB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAc;IAAA;MAAA;MAAA;MAAA;IAAA,QAC5C,eACN,QAAC,KAAK;MAAC,IAAI,EAAC,QAAG;MAAC,KAAK,EAAC,MAAM;MAAC,GAAG,EAAER,GAAI;MAAC,GAAG,EAAEE,GAAI;MAAC,UAAU;IAAA;MAAA;MAAA;MAAA;IAAA,QAAE,eAC7D,QAAC,KAAK;MAAC,IAAI,EAAC,cAAI;MAAC,KAAK,EAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAC3B;AAEV;AAAC,GArCQH,GAAG;AAAA,KAAHA,GAAG;AAuCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}